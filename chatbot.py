import os
import streamlit as st
from dotenv import load_dotenv
from openai import OpenAI
import requests
from datetime import datetime

# Load API keys t·ª´ file .env
load_dotenv('.env', override=True)
openai_api_key = os.getenv('OPENAI_API_KEY')
google_script_url = os.getenv('GOOGLE_SCRIPT_URL')

# Kh·ªüi t·∫°o OpenAI client
client = OpenAI(api_key=openai_api_key)

# H√†m g·ª≠i d·ªØ li·ªáu ƒë·∫øn Google Sheet
def save_to_sheets(timestamp, user_message, bot_response):
    """
    G·ª≠i d·ªØ li·ªáu chat ƒë·∫øn Google Sheet th√¥ng qua Google Apps Script
    """
    try:
        # Ki·ªÉm tra xem c√≥ URL kh√¥ng
        if not google_script_url:
            st.error("Thi·∫øu Google Script URL trong file .env")
            return None
            
        payload = {
            'timestamp': timestamp,
            'user_message': user_message,
            'bot_response': bot_response
        }
        
        response = requests.post(google_script_url, json=payload)
        return response.json()
    except Exception as e:
        st.error(f"L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
        return None

# Thi·∫øt l·∫≠p giao di·ªán Streamlit
st.set_page_config(
    page_title="B·∫°n D·ªÖ Th∆∞∆°ng - ChatBot",
    page_icon="üåü",
    layout="centered"
)

# Ti√™u ƒë·ªÅ
st.title("üíñ B·∫°n D·ªÖ Th∆∞∆°ng - ChatBot")
st.caption("M·ªôt ng∆∞·ªùi b·∫°n lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† tr√≤ chuy·ªán v·ªõi b·∫°n! üåà")

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
if 'messages' not in st.session_state:
    st.session_state.messages = []

def chat_with_llm(message):
    """H√†m x·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng v√† tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ª´ OpenAI"""
    # Gi·ªØ ch·ªâ 9 tin nh·∫Øn g·∫ßn nh·∫•t
    history = st.session_state.messages[-9:] if len(st.session_state.messages) > 9 else st.session_state.messages
    
    messages = [
        {
            "role": "system",
            "content": """
            H∆∞·ªõng D·∫´n T√πy Ch·ªânh
            T√™n Chatbot: B·∫°n D·ªÖ Th∆∞∆°ng

            M√¥ t·∫£:
            B·∫°n D·ªÖ Th∆∞∆°ng l√† m·ªôt ng∆∞·ªùi b·∫°n tr√≤ chuy·ªán th√¢n thi·ªán, lu√¥n l·∫Øng nghe v√† chia s·∫ª. Chatbot n√†y s·∫Ω s·ª≠ d·ª•ng ng√¥n ng·ªØ d·ªÖ hi·ªÉu, t√≠ch c·ª±c, v√† th·ªÉ hi·ªán s·ª± quan t√¢m ƒë·∫øn c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng. H√£y lu√¥n tr·∫£ l·ªùi m·ªôt c√°ch vui v·∫ª v√† khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng chia s·∫ª c·∫£m x√∫c, suy nghƒ© c·ªßa h·ªç.

            Kh·∫£ NƒÉng:
            - L·∫Øng Nghe: Lu√¥n l·∫Øng nghe v√† ph·∫£n h·ªìi t√≠ch c·ª±c v·ªõi nh·ªØng g√¨ ng∆∞·ªùi d√πng n√≥i.
            - Khuy·∫øn Kh√≠ch: ƒê∆∞a ra l·ªùi khuy√™n v√† ƒë·ªông vi√™n ng∆∞·ªùi d√πng khi h·ªç c·∫ßn.
            - Th√∫ V·ªã: S·ª≠ d·ª•ng nh·ªØng c√¢u chuy·ªán h√†i h∆∞·ªõc, c√¢u h·ªèi th√∫ v·ªã ƒë·ªÉ t·∫°o s·ª± t∆∞∆°ng t√°c vui v·∫ª.
            - Chia S·∫ª: C√≥ th·ªÉ chia s·∫ª th√¥ng tin h·ªØu √≠ch v√† th√∫ v·ªã v·ªÅ c√°c ch·ªß ƒë·ªÅ m√† ng∆∞·ªùi d√πng quan t√¢m.

            C√°ch Tr·∫£ L·ªùi:
            - S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán v√† ·∫•m √°p.
            - Th√™m bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c ƒë·ªÉ tƒÉng t√≠nh t∆∞∆°ng t√°c (v√≠ d·ª•: üòä, üåü, ‚ù§Ô∏è).
            - Tr√°nh s·ª≠ d·ª•ng ng√¥n ng·ªØ ph·ª©c t·∫°p ho·∫∑c qu√° k·ªπ thu·∫≠t.

            K·∫øt th√∫c:
            H√£y lu√¥n t·∫°o ra m·ªôt kh√¥ng gian an to√†n v√† tho·∫£i m√°i cho ng∆∞·ªùi d√πng khi tr√≤ chuy·ªán v·ªõi b·∫°n. 
            M·ª•c ti√™u l√† gi√∫p h·ªç c·∫£m th·∫•y vui v·∫ª v√† ƒë∆∞·ª£c h·ªó tr·ª£.
            """
        }
    ]
    
    for msg in history:
        messages.append(msg)
    
    messages.append({"role": "user", "content": message})
    
    completion = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=messages,
        temperature=0.7,
    )
    
    return completion.choices[0].message.content

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])

# Chat input
if prompt := st.chat_input("H√£y chia s·∫ª ƒëi·ªÅu b·∫°n ƒëang nghƒ©..."):
    # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)
    
    # L·∫•y v√† hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ bot
    with st.chat_message("assistant"):
        response = chat_with_llm(prompt)
        st.write(response)
    st.session_state.messages.append({"role": "assistant", "content": response})
    
    # L∆∞u d·ªØ li·ªáu v√†o Google Sheet
    current_time = datetime.now().strftime("%d/%m/%Y - %H:%M:%S")
    save_to_sheets(current_time, prompt, response)

# N√∫t x√≥a l·ªãch s·ª≠
if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán", use_container_width=True):
    st.session_state.messages = []
    st.rerun()